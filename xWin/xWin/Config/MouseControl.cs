// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mouse_control.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from mouse_control.proto</summary>
public static partial class MouseControlReflection {

  #region Descriptor
  /// <summary>File descriptor for mouse_control.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MouseControlReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNtb3VzZV9jb250cm9sLnByb3RvIsMJCgxCYXNpY0NvbnRyb2wSJwoKbGVm",
          "dF9zdGljaxgBIAEoCzITLkJhc2ljQ29udHJvbC5TdGljaxIoCgtyaWdodF9z",
          "dGljaxgCIAEoCzITLkJhc2ljQ29udHJvbC5TdGljaxIrCgxsZWZ0X3RyaWdn",
          "ZXIYAyABKAsyFS5CYXNpY0NvbnRyb2wuVHJpZ2dlchIsCg1yaWdodF90cmln",
          "Z2VyGAQgASgLMhUuQmFzaWNDb250cm9sLlRyaWdnZXISMAoKYnV0dG9uX21h",
          "cBgFIAMoCzIcLkJhc2ljQ29udHJvbC5CdXR0b25NYXBFbnRyeRpRCgdBY3Rp",
          "b25zEhAKCGtleWJpbmRzGAEgAygFEjQKD3NwZWNpYWxfYWN0aW9ucxgCIAMo",
          "DjIbLkJhc2ljQ29udHJvbC5TcGVjaWFsQWN0aW9uGvUBCghCZWhhdmlvchIn",
          "Cghvbl9wcmVzcxgBIAEoCzIVLkJhc2ljQ29udHJvbC5BY3Rpb25zEhcKD29u",
          "X3ByZXNzX3RvZ2dsZRgFIAEoCBImCgdvbl9ob2xkGAIgASgLMhUuQmFzaWND",
          "b250cm9sLkFjdGlvbnMSKQoKb25fcmVsZWFzZRgDIAEoCzIVLkJhc2ljQ29u",
          "dHJvbC5BY3Rpb25zEhkKEW9uX3JlbGVhc2VfdG9nZ2xlGAYgASgIEiYKB29u",
          "X3N0YXkYBCABKAsyFS5CYXNpY0NvbnRyb2wuQWN0aW9ucxIRCglibGFja2xp",
          "c3QYByADKAUaQQoGUmVnaW9uEigKCGJlaGF2aW9yGAEgASgLMhYuQmFzaWND",
          "b250cm9sLkJlaGF2aW9yEg0KBXJhbmdlGAIgASgNGsIBCgVTdGljaxIQCghk",
          "ZWFkem9uZRgBIAEoDRIVCg1jb250cm9sX21vdXNlGAIgASgIEhQKDHJlZ2lv",
          "bl9zdGFydBgDIAEoBRIlCgdyZWdpb25zGAQgAygLMhQuQmFzaWNDb250cm9s",
          "LlJlZ2lvbhItCg1zdGF5X2JlaGF2aW9yGAUgASgLMhYuQmFzaWNDb250cm9s",
          "LkJlaGF2aW9yEhEKCWludmVydF91ZBgGIAEoCBIRCglpbnZlcnRfbHIYByAB",
          "KAgabQoHVHJpZ2dlchIQCghkZWFkem9uZRgBIAEoDRIlCgdyZWdpb25zGAIg",
          "AygLMhQuQmFzaWNDb250cm9sLlJlZ2lvbhIpCgl1bnByZXNzZWQYAyABKAsy",
          "Fi5CYXNpY0NvbnRyb2wuQmVoYXZpb3IaSAoOQnV0dG9uTWFwRW50cnkSCwoD",
          "a2V5GAEgASgFEiUKBXZhbHVlGAIgASgLMhYuQmFzaWNDb250cm9sLkJlaGF2",
          "aW9yOgI4ASLGAQoNU3BlY2lhbEFjdGlvbhIMCghPcGVuTWVudRAAEg0KCU1v",
          "dXNlRG93bhABEg0KCU1vdXNlTGVmdBACEg4KCk1vdXNlUmlnaHQQAxILCgdN",
          "b3VzZVVwEAQSDgoKU2Nyb2xsRG93bhAJEg4KClNjcm9sbExlZnQQBxIPCgtT",
          "Y3JvbGxSaWdodBAIEgwKCFNjcm9sbFVwEAoSCQoFVHVyYm8QBRITCg9FbnRl",
          "clR5cGluZ01vZGUQBhINCglQcmVjaXNpb24QC2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BasicControl), global::BasicControl.Parser, new[]{ "LeftStick", "RightStick", "LeftTrigger", "RightTrigger", "ButtonMap" }, null, new[]{ typeof(global::BasicControl.Types.SpecialAction) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BasicControl.Types.Actions), global::BasicControl.Types.Actions.Parser, new[]{ "Keybinds", "SpecialActions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BasicControl.Types.Behavior), global::BasicControl.Types.Behavior.Parser, new[]{ "OnPress", "OnPressToggle", "OnHold", "OnRelease", "OnReleaseToggle", "OnStay", "Blacklist" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BasicControl.Types.Region), global::BasicControl.Types.Region.Parser, new[]{ "Behavior", "Range" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BasicControl.Types.Stick), global::BasicControl.Types.Stick.Parser, new[]{ "Deadzone", "ControlMouse", "RegionStart", "Regions", "StayBehavior", "InvertUd", "InvertLr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BasicControl.Types.Trigger), global::BasicControl.Types.Trigger.Parser, new[]{ "Deadzone", "Regions", "Unpressed" }, null, null, null),
          null, })
        }));
  }
  #endregion

}
#region Messages
public sealed partial class BasicControl : pb::IMessage<BasicControl> {
  private static readonly pb::MessageParser<BasicControl> _parser = new pb::MessageParser<BasicControl>(() => new BasicControl());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BasicControl> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MouseControlReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BasicControl() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BasicControl(BasicControl other) : this() {
    LeftStick = other.leftStick_ != null ? other.LeftStick.Clone() : null;
    RightStick = other.rightStick_ != null ? other.RightStick.Clone() : null;
    LeftTrigger = other.leftTrigger_ != null ? other.LeftTrigger.Clone() : null;
    RightTrigger = other.rightTrigger_ != null ? other.RightTrigger.Clone() : null;
    buttonMap_ = other.buttonMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BasicControl Clone() {
    return new BasicControl(this);
  }

  /// <summary>Field number for the "left_stick" field.</summary>
  public const int LeftStickFieldNumber = 1;
  private global::BasicControl.Types.Stick leftStick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BasicControl.Types.Stick LeftStick {
    get { return leftStick_; }
    set {
      leftStick_ = value;
    }
  }

  /// <summary>Field number for the "right_stick" field.</summary>
  public const int RightStickFieldNumber = 2;
  private global::BasicControl.Types.Stick rightStick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BasicControl.Types.Stick RightStick {
    get { return rightStick_; }
    set {
      rightStick_ = value;
    }
  }

  /// <summary>Field number for the "left_trigger" field.</summary>
  public const int LeftTriggerFieldNumber = 3;
  private global::BasicControl.Types.Trigger leftTrigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BasicControl.Types.Trigger LeftTrigger {
    get { return leftTrigger_; }
    set {
      leftTrigger_ = value;
    }
  }

  /// <summary>Field number for the "right_trigger" field.</summary>
  public const int RightTriggerFieldNumber = 4;
  private global::BasicControl.Types.Trigger rightTrigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BasicControl.Types.Trigger RightTrigger {
    get { return rightTrigger_; }
    set {
      rightTrigger_ = value;
    }
  }

  /// <summary>Field number for the "button_map" field.</summary>
  public const int ButtonMapFieldNumber = 5;
  private static readonly pbc::MapField<int, global::BasicControl.Types.Behavior>.Codec _map_buttonMap_codec
      = new pbc::MapField<int, global::BasicControl.Types.Behavior>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::BasicControl.Types.Behavior.Parser), 42);
  private readonly pbc::MapField<int, global::BasicControl.Types.Behavior> buttonMap_ = new pbc::MapField<int, global::BasicControl.Types.Behavior>();
  /// <summary>
  ///use the sharpdx enum for key
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::BasicControl.Types.Behavior> ButtonMap {
    get { return buttonMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BasicControl);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BasicControl other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LeftStick, other.LeftStick)) return false;
    if (!object.Equals(RightStick, other.RightStick)) return false;
    if (!object.Equals(LeftTrigger, other.LeftTrigger)) return false;
    if (!object.Equals(RightTrigger, other.RightTrigger)) return false;
    if (!ButtonMap.Equals(other.ButtonMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (leftStick_ != null) hash ^= LeftStick.GetHashCode();
    if (rightStick_ != null) hash ^= RightStick.GetHashCode();
    if (leftTrigger_ != null) hash ^= LeftTrigger.GetHashCode();
    if (rightTrigger_ != null) hash ^= RightTrigger.GetHashCode();
    hash ^= ButtonMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (leftStick_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(LeftStick);
    }
    if (rightStick_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RightStick);
    }
    if (leftTrigger_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LeftTrigger);
    }
    if (rightTrigger_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(RightTrigger);
    }
    buttonMap_.WriteTo(output, _map_buttonMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (leftStick_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftStick);
    }
    if (rightStick_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightStick);
    }
    if (leftTrigger_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftTrigger);
    }
    if (rightTrigger_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightTrigger);
    }
    size += buttonMap_.CalculateSize(_map_buttonMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BasicControl other) {
    if (other == null) {
      return;
    }
    if (other.leftStick_ != null) {
      if (leftStick_ == null) {
        leftStick_ = new global::BasicControl.Types.Stick();
      }
      LeftStick.MergeFrom(other.LeftStick);
    }
    if (other.rightStick_ != null) {
      if (rightStick_ == null) {
        rightStick_ = new global::BasicControl.Types.Stick();
      }
      RightStick.MergeFrom(other.RightStick);
    }
    if (other.leftTrigger_ != null) {
      if (leftTrigger_ == null) {
        leftTrigger_ = new global::BasicControl.Types.Trigger();
      }
      LeftTrigger.MergeFrom(other.LeftTrigger);
    }
    if (other.rightTrigger_ != null) {
      if (rightTrigger_ == null) {
        rightTrigger_ = new global::BasicControl.Types.Trigger();
      }
      RightTrigger.MergeFrom(other.RightTrigger);
    }
    buttonMap_.Add(other.buttonMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (leftStick_ == null) {
            leftStick_ = new global::BasicControl.Types.Stick();
          }
          input.ReadMessage(leftStick_);
          break;
        }
        case 18: {
          if (rightStick_ == null) {
            rightStick_ = new global::BasicControl.Types.Stick();
          }
          input.ReadMessage(rightStick_);
          break;
        }
        case 26: {
          if (leftTrigger_ == null) {
            leftTrigger_ = new global::BasicControl.Types.Trigger();
          }
          input.ReadMessage(leftTrigger_);
          break;
        }
        case 34: {
          if (rightTrigger_ == null) {
            rightTrigger_ = new global::BasicControl.Types.Trigger();
          }
          input.ReadMessage(rightTrigger_);
          break;
        }
        case 42: {
          buttonMap_.AddEntriesFrom(input, _map_buttonMap_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BasicControl message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum SpecialAction {
      [pbr::OriginalName("OpenMenu")] OpenMenu = 0,
      [pbr::OriginalName("MouseDown")] MouseDown = 1,
      [pbr::OriginalName("MouseLeft")] MouseLeft = 2,
      [pbr::OriginalName("MouseRight")] MouseRight = 3,
      [pbr::OriginalName("MouseUp")] MouseUp = 4,
      [pbr::OriginalName("ScrollDown")] ScrollDown = 9,
      [pbr::OriginalName("ScrollLeft")] ScrollLeft = 7,
      [pbr::OriginalName("ScrollRight")] ScrollRight = 8,
      [pbr::OriginalName("ScrollUp")] ScrollUp = 10,
      [pbr::OriginalName("Turbo")] Turbo = 5,
      [pbr::OriginalName("EnterTypingMode")] EnterTypingMode = 6,
      /// <summary>
      ///opposite of turbo
      /// </summary>
      [pbr::OriginalName("Precision")] Precision = 11,
    }

    public sealed partial class Actions : pb::IMessage<Actions> {
      private static readonly pb::MessageParser<Actions> _parser = new pb::MessageParser<Actions>(() => new Actions());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Actions> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BasicControl.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Actions() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Actions(Actions other) : this() {
        keybinds_ = other.keybinds_.Clone();
        specialActions_ = other.specialActions_.Clone();
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Actions Clone() {
        return new Actions(this);
      }

      /// <summary>Field number for the "keybinds" field.</summary>
      public const int KeybindsFieldNumber = 1;
      private static readonly pb::FieldCodec<int> _repeated_keybinds_codec
          = pb::FieldCodec.ForInt32(10);
      private readonly pbc::RepeatedField<int> keybinds_ = new pbc::RepeatedField<int>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> Keybinds {
        get { return keybinds_; }
      }

      /// <summary>Field number for the "special_actions" field.</summary>
      public const int SpecialActionsFieldNumber = 2;
      private static readonly pb::FieldCodec<global::BasicControl.Types.SpecialAction> _repeated_specialActions_codec
          = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::BasicControl.Types.SpecialAction) x);
      private readonly pbc::RepeatedField<global::BasicControl.Types.SpecialAction> specialActions_ = new pbc::RepeatedField<global::BasicControl.Types.SpecialAction>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BasicControl.Types.SpecialAction> SpecialActions {
        get { return specialActions_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Actions);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Actions other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!keybinds_.Equals(other.keybinds_)) return false;
        if(!specialActions_.Equals(other.specialActions_)) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= keybinds_.GetHashCode();
        hash ^= specialActions_.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        keybinds_.WriteTo(output, _repeated_keybinds_codec);
        specialActions_.WriteTo(output, _repeated_specialActions_codec);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        size += keybinds_.CalculateSize(_repeated_keybinds_codec);
        size += specialActions_.CalculateSize(_repeated_specialActions_codec);
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Actions other) {
        if (other == null) {
          return;
        }
        keybinds_.Add(other.keybinds_);
        specialActions_.Add(other.specialActions_);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10:
            case 8: {
              keybinds_.AddEntriesFrom(input, _repeated_keybinds_codec);
              break;
            }
            case 18:
            case 16: {
              specialActions_.AddEntriesFrom(input, _repeated_specialActions_codec);
              break;
            }
          }
        }
      }

    }

    public sealed partial class Behavior : pb::IMessage<Behavior> {
      private static readonly pb::MessageParser<Behavior> _parser = new pb::MessageParser<Behavior>(() => new Behavior());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Behavior> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BasicControl.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Behavior() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Behavior(Behavior other) : this() {
        OnPress = other.onPress_ != null ? other.OnPress.Clone() : null;
        onPressToggle_ = other.onPressToggle_;
        OnHold = other.onHold_ != null ? other.OnHold.Clone() : null;
        OnRelease = other.onRelease_ != null ? other.OnRelease.Clone() : null;
        onReleaseToggle_ = other.onReleaseToggle_;
        OnStay = other.onStay_ != null ? other.OnStay.Clone() : null;
        blacklist_ = other.blacklist_.Clone();
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Behavior Clone() {
        return new Behavior(this);
      }

      /// <summary>Field number for the "on_press" field.</summary>
      public const int OnPressFieldNumber = 1;
      private global::BasicControl.Types.Actions onPress_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BasicControl.Types.Actions OnPress {
        get { return onPress_; }
        set {
          onPress_ = value;
        }
      }

      /// <summary>Field number for the "on_press_toggle" field.</summary>
      public const int OnPressToggleFieldNumber = 5;
      private bool onPressToggle_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool OnPressToggle {
        get { return onPressToggle_; }
        set {
          onPressToggle_ = value;
        }
      }

      /// <summary>Field number for the "on_hold" field.</summary>
      public const int OnHoldFieldNumber = 2;
      private global::BasicControl.Types.Actions onHold_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BasicControl.Types.Actions OnHold {
        get { return onHold_; }
        set {
          onHold_ = value;
        }
      }

      /// <summary>Field number for the "on_release" field.</summary>
      public const int OnReleaseFieldNumber = 3;
      private global::BasicControl.Types.Actions onRelease_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BasicControl.Types.Actions OnRelease {
        get { return onRelease_; }
        set {
          onRelease_ = value;
        }
      }

      /// <summary>Field number for the "on_release_toggle" field.</summary>
      public const int OnReleaseToggleFieldNumber = 6;
      private bool onReleaseToggle_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool OnReleaseToggle {
        get { return onReleaseToggle_; }
        set {
          onReleaseToggle_ = value;
        }
      }

      /// <summary>Field number for the "on_stay" field.</summary>
      public const int OnStayFieldNumber = 4;
      private global::BasicControl.Types.Actions onStay_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BasicControl.Types.Actions OnStay {
        get { return onStay_; }
        set {
          onStay_ = value;
        }
      }

      /// <summary>Field number for the "blacklist" field.</summary>
      public const int BlacklistFieldNumber = 7;
      private static readonly pb::FieldCodec<int> _repeated_blacklist_codec
          = pb::FieldCodec.ForInt32(58);
      private readonly pbc::RepeatedField<int> blacklist_ = new pbc::RepeatedField<int>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> Blacklist {
        get { return blacklist_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Behavior);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Behavior other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!object.Equals(OnPress, other.OnPress)) return false;
        if (OnPressToggle != other.OnPressToggle) return false;
        if (!object.Equals(OnHold, other.OnHold)) return false;
        if (!object.Equals(OnRelease, other.OnRelease)) return false;
        if (OnReleaseToggle != other.OnReleaseToggle) return false;
        if (!object.Equals(OnStay, other.OnStay)) return false;
        if(!blacklist_.Equals(other.blacklist_)) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (onPress_ != null) hash ^= OnPress.GetHashCode();
        if (OnPressToggle != false) hash ^= OnPressToggle.GetHashCode();
        if (onHold_ != null) hash ^= OnHold.GetHashCode();
        if (onRelease_ != null) hash ^= OnRelease.GetHashCode();
        if (OnReleaseToggle != false) hash ^= OnReleaseToggle.GetHashCode();
        if (onStay_ != null) hash ^= OnStay.GetHashCode();
        hash ^= blacklist_.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (onPress_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(OnPress);
        }
        if (onHold_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(OnHold);
        }
        if (onRelease_ != null) {
          output.WriteRawTag(26);
          output.WriteMessage(OnRelease);
        }
        if (onStay_ != null) {
          output.WriteRawTag(34);
          output.WriteMessage(OnStay);
        }
        if (OnPressToggle != false) {
          output.WriteRawTag(40);
          output.WriteBool(OnPressToggle);
        }
        if (OnReleaseToggle != false) {
          output.WriteRawTag(48);
          output.WriteBool(OnReleaseToggle);
        }
        blacklist_.WriteTo(output, _repeated_blacklist_codec);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (onPress_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnPress);
        }
        if (OnPressToggle != false) {
          size += 1 + 1;
        }
        if (onHold_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnHold);
        }
        if (onRelease_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnRelease);
        }
        if (OnReleaseToggle != false) {
          size += 1 + 1;
        }
        if (onStay_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnStay);
        }
        size += blacklist_.CalculateSize(_repeated_blacklist_codec);
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Behavior other) {
        if (other == null) {
          return;
        }
        if (other.onPress_ != null) {
          if (onPress_ == null) {
            onPress_ = new global::BasicControl.Types.Actions();
          }
          OnPress.MergeFrom(other.OnPress);
        }
        if (other.OnPressToggle != false) {
          OnPressToggle = other.OnPressToggle;
        }
        if (other.onHold_ != null) {
          if (onHold_ == null) {
            onHold_ = new global::BasicControl.Types.Actions();
          }
          OnHold.MergeFrom(other.OnHold);
        }
        if (other.onRelease_ != null) {
          if (onRelease_ == null) {
            onRelease_ = new global::BasicControl.Types.Actions();
          }
          OnRelease.MergeFrom(other.OnRelease);
        }
        if (other.OnReleaseToggle != false) {
          OnReleaseToggle = other.OnReleaseToggle;
        }
        if (other.onStay_ != null) {
          if (onStay_ == null) {
            onStay_ = new global::BasicControl.Types.Actions();
          }
          OnStay.MergeFrom(other.OnStay);
        }
        blacklist_.Add(other.blacklist_);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              if (onPress_ == null) {
                onPress_ = new global::BasicControl.Types.Actions();
              }
              input.ReadMessage(onPress_);
              break;
            }
            case 18: {
              if (onHold_ == null) {
                onHold_ = new global::BasicControl.Types.Actions();
              }
              input.ReadMessage(onHold_);
              break;
            }
            case 26: {
              if (onRelease_ == null) {
                onRelease_ = new global::BasicControl.Types.Actions();
              }
              input.ReadMessage(onRelease_);
              break;
            }
            case 34: {
              if (onStay_ == null) {
                onStay_ = new global::BasicControl.Types.Actions();
              }
              input.ReadMessage(onStay_);
              break;
            }
            case 40: {
              OnPressToggle = input.ReadBool();
              break;
            }
            case 48: {
              OnReleaseToggle = input.ReadBool();
              break;
            }
            case 58:
            case 56: {
              blacklist_.AddEntriesFrom(input, _repeated_blacklist_codec);
              break;
            }
          }
        }
      }

    }

    public sealed partial class Region : pb::IMessage<Region> {
      private static readonly pb::MessageParser<Region> _parser = new pb::MessageParser<Region>(() => new Region());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Region> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BasicControl.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Region() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Region(Region other) : this() {
        Behavior = other.behavior_ != null ? other.Behavior.Clone() : null;
        range_ = other.range_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Region Clone() {
        return new Region(this);
      }

      /// <summary>Field number for the "behavior" field.</summary>
      public const int BehaviorFieldNumber = 1;
      private global::BasicControl.Types.Behavior behavior_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BasicControl.Types.Behavior Behavior {
        get { return behavior_; }
        set {
          behavior_ = value;
        }
      }

      /// <summary>Field number for the "range" field.</summary>
      public const int RangeFieldNumber = 2;
      private uint range_;
      /// <summary>
      ///for sticks this is an arc length in degrees, for triggers its a value from 1-255
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Range {
        get { return range_; }
        set {
          range_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Region);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Region other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!object.Equals(Behavior, other.Behavior)) return false;
        if (Range != other.Range) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (behavior_ != null) hash ^= Behavior.GetHashCode();
        if (Range != 0) hash ^= Range.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (behavior_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(Behavior);
        }
        if (Range != 0) {
          output.WriteRawTag(16);
          output.WriteUInt32(Range);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (behavior_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Behavior);
        }
        if (Range != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Range);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Region other) {
        if (other == null) {
          return;
        }
        if (other.behavior_ != null) {
          if (behavior_ == null) {
            behavior_ = new global::BasicControl.Types.Behavior();
          }
          Behavior.MergeFrom(other.Behavior);
        }
        if (other.Range != 0) {
          Range = other.Range;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              if (behavior_ == null) {
                behavior_ = new global::BasicControl.Types.Behavior();
              }
              input.ReadMessage(behavior_);
              break;
            }
            case 16: {
              Range = input.ReadUInt32();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Stick : pb::IMessage<Stick> {
      private static readonly pb::MessageParser<Stick> _parser = new pb::MessageParser<Stick>(() => new Stick());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Stick> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BasicControl.Descriptor.NestedTypes[3]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Stick() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Stick(Stick other) : this() {
        deadzone_ = other.deadzone_;
        controlMouse_ = other.controlMouse_;
        regionStart_ = other.regionStart_;
        regions_ = other.regions_.Clone();
        StayBehavior = other.stayBehavior_ != null ? other.StayBehavior.Clone() : null;
        invertUd_ = other.invertUd_;
        invertLr_ = other.invertLr_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Stick Clone() {
        return new Stick(this);
      }

      /// <summary>Field number for the "deadzone" field.</summary>
      public const int DeadzoneFieldNumber = 1;
      private uint deadzone_;
      /// <summary>
      ///how far must the stick go to count as moved
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Deadzone {
        get { return deadzone_; }
        set {
          deadzone_ = value;
        }
      }

      /// <summary>Field number for the "control_mouse" field.</summary>
      public const int ControlMouseFieldNumber = 2;
      private bool controlMouse_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool ControlMouse {
        get { return controlMouse_; }
        set {
          controlMouse_ = value;
        }
      }

      /// <summary>Field number for the "region_start" field.</summary>
      public const int RegionStartFieldNumber = 3;
      private int regionStart_;
      /// <summary>
      ///the arc length clockwise from the topmost point of the stick circumference. This is the location of the Center of the 0th region.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int RegionStart {
        get { return regionStart_; }
        set {
          regionStart_ = value;
        }
      }

      /// <summary>Field number for the "regions" field.</summary>
      public const int RegionsFieldNumber = 4;
      private static readonly pb::FieldCodec<global::BasicControl.Types.Region> _repeated_regions_codec
          = pb::FieldCodec.ForMessage(34, global::BasicControl.Types.Region.Parser);
      private readonly pbc::RepeatedField<global::BasicControl.Types.Region> regions_ = new pbc::RepeatedField<global::BasicControl.Types.Region>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BasicControl.Types.Region> Regions {
        get { return regions_; }
      }

      /// <summary>Field number for the "stay_behavior" field.</summary>
      public const int StayBehaviorFieldNumber = 5;
      private global::BasicControl.Types.Behavior stayBehavior_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BasicControl.Types.Behavior StayBehavior {
        get { return stayBehavior_; }
        set {
          stayBehavior_ = value;
        }
      }

      /// <summary>Field number for the "invert_ud" field.</summary>
      public const int InvertUdFieldNumber = 6;
      private bool invertUd_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool InvertUd {
        get { return invertUd_; }
        set {
          invertUd_ = value;
        }
      }

      /// <summary>Field number for the "invert_lr" field.</summary>
      public const int InvertLrFieldNumber = 7;
      private bool invertLr_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool InvertLr {
        get { return invertLr_; }
        set {
          invertLr_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Stick);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Stick other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Deadzone != other.Deadzone) return false;
        if (ControlMouse != other.ControlMouse) return false;
        if (RegionStart != other.RegionStart) return false;
        if(!regions_.Equals(other.regions_)) return false;
        if (!object.Equals(StayBehavior, other.StayBehavior)) return false;
        if (InvertUd != other.InvertUd) return false;
        if (InvertLr != other.InvertLr) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Deadzone != 0) hash ^= Deadzone.GetHashCode();
        if (ControlMouse != false) hash ^= ControlMouse.GetHashCode();
        if (RegionStart != 0) hash ^= RegionStart.GetHashCode();
        hash ^= regions_.GetHashCode();
        if (stayBehavior_ != null) hash ^= StayBehavior.GetHashCode();
        if (InvertUd != false) hash ^= InvertUd.GetHashCode();
        if (InvertLr != false) hash ^= InvertLr.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Deadzone != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(Deadzone);
        }
        if (ControlMouse != false) {
          output.WriteRawTag(16);
          output.WriteBool(ControlMouse);
        }
        if (RegionStart != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(RegionStart);
        }
        regions_.WriteTo(output, _repeated_regions_codec);
        if (stayBehavior_ != null) {
          output.WriteRawTag(42);
          output.WriteMessage(StayBehavior);
        }
        if (InvertUd != false) {
          output.WriteRawTag(48);
          output.WriteBool(InvertUd);
        }
        if (InvertLr != false) {
          output.WriteRawTag(56);
          output.WriteBool(InvertLr);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Deadzone != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deadzone);
        }
        if (ControlMouse != false) {
          size += 1 + 1;
        }
        if (RegionStart != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionStart);
        }
        size += regions_.CalculateSize(_repeated_regions_codec);
        if (stayBehavior_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(StayBehavior);
        }
        if (InvertUd != false) {
          size += 1 + 1;
        }
        if (InvertLr != false) {
          size += 1 + 1;
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Stick other) {
        if (other == null) {
          return;
        }
        if (other.Deadzone != 0) {
          Deadzone = other.Deadzone;
        }
        if (other.ControlMouse != false) {
          ControlMouse = other.ControlMouse;
        }
        if (other.RegionStart != 0) {
          RegionStart = other.RegionStart;
        }
        regions_.Add(other.regions_);
        if (other.stayBehavior_ != null) {
          if (stayBehavior_ == null) {
            stayBehavior_ = new global::BasicControl.Types.Behavior();
          }
          StayBehavior.MergeFrom(other.StayBehavior);
        }
        if (other.InvertUd != false) {
          InvertUd = other.InvertUd;
        }
        if (other.InvertLr != false) {
          InvertLr = other.InvertLr;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Deadzone = input.ReadUInt32();
              break;
            }
            case 16: {
              ControlMouse = input.ReadBool();
              break;
            }
            case 24: {
              RegionStart = input.ReadInt32();
              break;
            }
            case 34: {
              regions_.AddEntriesFrom(input, _repeated_regions_codec);
              break;
            }
            case 42: {
              if (stayBehavior_ == null) {
                stayBehavior_ = new global::BasicControl.Types.Behavior();
              }
              input.ReadMessage(stayBehavior_);
              break;
            }
            case 48: {
              InvertUd = input.ReadBool();
              break;
            }
            case 56: {
              InvertLr = input.ReadBool();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Trigger : pb::IMessage<Trigger> {
      private static readonly pb::MessageParser<Trigger> _parser = new pb::MessageParser<Trigger>(() => new Trigger());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Trigger> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BasicControl.Descriptor.NestedTypes[4]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Trigger() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Trigger(Trigger other) : this() {
        deadzone_ = other.deadzone_;
        regions_ = other.regions_.Clone();
        Unpressed = other.unpressed_ != null ? other.Unpressed.Clone() : null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Trigger Clone() {
        return new Trigger(this);
      }

      /// <summary>Field number for the "deadzone" field.</summary>
      public const int DeadzoneFieldNumber = 1;
      private uint deadzone_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Deadzone {
        get { return deadzone_; }
        set {
          deadzone_ = value;
        }
      }

      /// <summary>Field number for the "regions" field.</summary>
      public const int RegionsFieldNumber = 2;
      private static readonly pb::FieldCodec<global::BasicControl.Types.Region> _repeated_regions_codec
          = pb::FieldCodec.ForMessage(18, global::BasicControl.Types.Region.Parser);
      private readonly pbc::RepeatedField<global::BasicControl.Types.Region> regions_ = new pbc::RepeatedField<global::BasicControl.Types.Region>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BasicControl.Types.Region> Regions {
        get { return regions_; }
      }

      /// <summary>Field number for the "unpressed" field.</summary>
      public const int UnpressedFieldNumber = 3;
      private global::BasicControl.Types.Behavior unpressed_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BasicControl.Types.Behavior Unpressed {
        get { return unpressed_; }
        set {
          unpressed_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Trigger);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Trigger other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Deadzone != other.Deadzone) return false;
        if(!regions_.Equals(other.regions_)) return false;
        if (!object.Equals(Unpressed, other.Unpressed)) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Deadzone != 0) hash ^= Deadzone.GetHashCode();
        hash ^= regions_.GetHashCode();
        if (unpressed_ != null) hash ^= Unpressed.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Deadzone != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(Deadzone);
        }
        regions_.WriteTo(output, _repeated_regions_codec);
        if (unpressed_ != null) {
          output.WriteRawTag(26);
          output.WriteMessage(Unpressed);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Deadzone != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deadzone);
        }
        size += regions_.CalculateSize(_repeated_regions_codec);
        if (unpressed_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unpressed);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Trigger other) {
        if (other == null) {
          return;
        }
        if (other.Deadzone != 0) {
          Deadzone = other.Deadzone;
        }
        regions_.Add(other.regions_);
        if (other.unpressed_ != null) {
          if (unpressed_ == null) {
            unpressed_ = new global::BasicControl.Types.Behavior();
          }
          Unpressed.MergeFrom(other.Unpressed);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Deadzone = input.ReadUInt32();
              break;
            }
            case 18: {
              regions_.AddEntriesFrom(input, _repeated_regions_codec);
              break;
            }
            case 26: {
              if (unpressed_ == null) {
                unpressed_ = new global::BasicControl.Types.Behavior();
              }
              input.ReadMessage(unpressed_);
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
