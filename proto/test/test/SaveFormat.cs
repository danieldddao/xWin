// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: save_format.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from save_format.proto</summary>
public static partial class SaveFormatReflection {

  #region Descriptor
  /// <summary>File descriptor for save_format.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SaveFormatReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFzYXZlX2Zvcm1hdC5wcm90bxoTbW91c2VfY29udHJvbC5wcm90bxoWa2V5",
          "Ym9hcmRfY29udHJvbC5wcm90byKEAQoNQ29uZmlndXJhdGlvbhIcCgViYXNp",
          "YxgBIAEoCzINLkJhc2ljQ29udHJvbBIeCgZ0eXBpbmcYAiABKAsyDi5UeXBp",
          "bmdDb250cm9sEgwKBG5hbWUYAyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkS",
          "EgoKdG9nZ2xlc3RvcBgFIAEoBWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::MouseControlReflection.Descriptor, global::KeyboardControlReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Configuration), global::Configuration.Parser, new[]{ "Basic", "Typing", "Name", "Description", "Togglestop" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Configuration : pb::IMessage<Configuration> {
  private static readonly pb::MessageParser<Configuration> _parser = new pb::MessageParser<Configuration>(() => new Configuration());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Configuration> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SaveFormatReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Configuration() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Configuration(Configuration other) : this() {
    Basic = other.basic_ != null ? other.Basic.Clone() : null;
    Typing = other.typing_ != null ? other.Typing.Clone() : null;
    name_ = other.name_;
    description_ = other.description_;
    togglestop_ = other.togglestop_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Configuration Clone() {
    return new Configuration(this);
  }

  /// <summary>Field number for the "basic" field.</summary>
  public const int BasicFieldNumber = 1;
  private global::BasicControl basic_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BasicControl Basic {
    get { return basic_; }
    set {
      basic_ = value;
    }
  }

  /// <summary>Field number for the "typing" field.</summary>
  public const int TypingFieldNumber = 2;
  private global::TypingControl typing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypingControl Typing {
    get { return typing_; }
    set {
      typing_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "togglestop" field.</summary>
  public const int TogglestopFieldNumber = 5;
  private int togglestop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Togglestop {
    get { return togglestop_; }
    set {
      togglestop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Configuration);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Configuration other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Basic, other.Basic)) return false;
    if (!object.Equals(Typing, other.Typing)) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (Togglestop != other.Togglestop) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (basic_ != null) hash ^= Basic.GetHashCode();
    if (typing_ != null) hash ^= Typing.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (Togglestop != 0) hash ^= Togglestop.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (basic_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Basic);
    }
    if (typing_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Typing);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (Togglestop != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Togglestop);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (basic_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Basic);
    }
    if (typing_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Typing);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (Togglestop != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Togglestop);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Configuration other) {
    if (other == null) {
      return;
    }
    if (other.basic_ != null) {
      if (basic_ == null) {
        basic_ = new global::BasicControl();
      }
      Basic.MergeFrom(other.Basic);
    }
    if (other.typing_ != null) {
      if (typing_ == null) {
        typing_ = new global::TypingControl();
      }
      Typing.MergeFrom(other.Typing);
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    if (other.Togglestop != 0) {
      Togglestop = other.Togglestop;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (basic_ == null) {
            basic_ = new global::BasicControl();
          }
          input.ReadMessage(basic_);
          break;
        }
        case 18: {
          if (typing_ == null) {
            typing_ = new global::TypingControl();
          }
          input.ReadMessage(typing_);
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          Togglestop = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
